{
  "en": {
    "description-1": "For the creation of an immersive interactive Karaoke experience, I developed two user interfaces for event directors and technicians. These interfaces are designed to control the state of the machines running the experience (servers, video projectors, media players, etc.) and to manage the experience while it's running.",
    "description-2": "The first interface is the Show Control. Gathering data from the Postgres database managed by Directus, the UI displays the machines and their current state, then allows controlling their state using ON/OFF/REBOOT buttons. A dedicated Macros section enables turning all machines on or off at once. The macro and machine lists are dynamically created and synchronized with Directus collections. For this interface, I created a custom Directus extension. I developed a collection of reusable Vue.js components, several composables to fetch and format various data, as well as the show control view that orchestrates all these components and handles state management.",
    "description-3": "The second interface is the Experience Control. Connected to the experience via WebSocket and to the external Device Supervisor API, it allows controlling the Media Players and the current experience session (changing sessions, loading sessions, stopping sessions, etc.). For this interface, I created a WebSocket client, developed custom endpoints for the Device Supervisor and WebSocket server, as well as the Experience Control view that orchestrates the various components and handles state management.",
    "description-4": "This project was my first professional experience with Vue.js and Directus and allowed me to better understand the Vue.js workflow, working with a CMS, and creating custom extensions in Directus."
  },
  "fr": {
    "description-1": "Pour la création d'une expérience immersive de Karaoké interactif, j'ai développé deux interfaces utilisateur pour les régisseurs et techniciens de l'événement. Ces interfaces ont pour but de contrôler l'état des machines sur lesquelles l'expérience est produite (serveurs, vidéoprojecteurs, media players etc.) et de contrôler l'état de l'expérience lorsqu'elle est en cours.",
    "description-2": "La première interface est le Show Control. Réunissant les données de la DB postgres gérée par Directus, l'UI permet d'afficher les machines et leur état actuel, pour ensuite contrôler leur état grâce aux boutons ON/OFF/REBOOT. Une partie dédiée au macros permet d'allumer ou d'éteindre toutes les machines d'un coup. Les listes de macros et de machines sont créées dynamiquement et synchronisées aux collections Directus. Pour cette interface, j'ai créé une extension custom Directus. J'ai développé une collection de components Vue.js réutilisables, plusieurs composables pour récupérer les différentes données et les formatter, ainsi que la vue du show control qui permet d'orchestrer tous ces components et le state management.",
    "description-3": "La seconde interface est l'Experience Control. Connectée à l'experience via Websocket et à l'API externe Device Supervisor, elle permet de piloter les Media Players et La session de l'expérience en cours (changer de session, charger la session, arrêter la session etc.). Pour cette interface, j'ai créé un client Websocket, développé des custom endpoints pour le Device Supervisor et le serveur Websocket, ainsi que la vue de l'Experience Control qui permet d'orchestrer les différents components et le state management.",
    "description-4": "Ce projet aura été une première expérience professionnelle avec Vue.js et Directus et m'a permis de mieux comprendre le workflow Vue.js, la prise en main d'un CMS et la création d'extensions custom dans Directus."
  }
}
